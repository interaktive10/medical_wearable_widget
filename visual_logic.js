/* eslint-disable */

/**
 * Generated by Verge3D Puzzles v.4.2.0
 * Sun, 20 Aug 2023 08:20:27 GMT
 * Prefer not editing this file as your changes may get overridden once Puzzles are saved.
 * Check out https://www.soft8soft.com/docs/manual/en/introduction/Using-JavaScript.html
 * for the information on how to add your own JavaScript to Verge3D apps.
 */
function createPL(v3d = window.v3d) {

// global variables/constants used by puzzles' functions

var LIST_NONE = '<none>';

var _pGlob = {};

_pGlob.objCache = {};
_pGlob.fadeAnnotations = true;
_pGlob.pickedObject = '';
_pGlob.hoveredObject = '';
_pGlob.mediaElements = {};
_pGlob.loadedFile = '';
_pGlob.states = [];
_pGlob.percentage = 0;
_pGlob.openedFile = '';
_pGlob.openedFileMeta = {};
_pGlob.xrSessionAcquired = false;
_pGlob.xrSessionCallbacks = [];
_pGlob.screenCoords = new v3d.Vector2();
_pGlob.intervalTimers = {};
_pGlob.customEvents = new v3d.EventDispatcher();
_pGlob.eventListeners = [];

_pGlob.AXIS_X = new v3d.Vector3(1, 0, 0);
_pGlob.AXIS_Y = new v3d.Vector3(0, 1, 0);
_pGlob.AXIS_Z = new v3d.Vector3(0, 0, 1);
_pGlob.MIN_DRAG_SCALE = 10e-4;
_pGlob.SET_OBJ_ROT_EPS = 1e-8;

_pGlob.vec2Tmp = new v3d.Vector2();
_pGlob.vec2Tmp2 = new v3d.Vector2();
_pGlob.vec3Tmp = new v3d.Vector3();
_pGlob.vec3Tmp2 = new v3d.Vector3();
_pGlob.vec3Tmp3 = new v3d.Vector3();
_pGlob.vec3Tmp4 = new v3d.Vector3();
_pGlob.eulerTmp = new v3d.Euler();
_pGlob.eulerTmp2 = new v3d.Euler();
_pGlob.quatTmp = new v3d.Quaternion();
_pGlob.quatTmp2 = new v3d.Quaternion();
_pGlob.colorTmp = new v3d.Color();
_pGlob.mat4Tmp = new v3d.Matrix4();
_pGlob.planeTmp = new v3d.Plane();
_pGlob.raycasterTmp = new v3d.Raycaster(); // always check visibility

var PL = {};
// backward compatibility
if (v3d[Symbol.toStringTag] !== 'Module') {
    v3d.PL = v3d.puzzles = PL;
}

PL.procedures = PL.procedures || {};




PL.execInitPuzzles = function(options) {
    // always null, should not be available in "init" puzzles
    var appInstance = null;
    // app is more conventional than appInstance (used in exec script and app templates)
    var app = null;

    var _initGlob = {};
    _initGlob.percentage = 0;
    _initGlob.output = {
        initOptions: {
            fadeAnnotations: true,
            useBkgTransp: false,
            preserveDrawBuf: false,
            useCompAssets: false,
            useFullscreen: true,
            useCustomPreloader: false,
            preloaderStartCb: function() {},
            preloaderProgressCb: function() {},
            preloaderEndCb: function() {},
        }
    }

    // provide the container's id to puzzles that need access to the container
    _initGlob.container = options !== undefined && 'container' in options
            ? options.container : "";

    

    // utility functions envoked by the HTML puzzles
function getElements(ids, isParent) {
    var elems = [];
    if (Array.isArray(ids) && ids[0] != 'CONTAINER' && ids[0] != 'WINDOW' &&
        ids[0] != 'DOCUMENT' && ids[0] != 'BODY' && ids[0] != 'QUERYSELECTOR') {
        for (var i = 0; i < ids.length; i++)
            elems.push(getElement(ids[i], isParent));
    } else {
        elems.push(getElement(ids, isParent));
    }
    return elems;
}

function getElement(id, isParent) {
    var elem;
    if (Array.isArray(id) && id[0] == 'CONTAINER') {
        if (appInstance !== null) {
            elem = appInstance.container;
        } else if (typeof _initGlob !== 'undefined') {
            // if we are on the initialization stage, we still can have access
            // to the container element
            var id = _initGlob.container;
            if (isParent) {
                elem = parent.document.getElementById(id);
            } else {
                elem = document.getElementById(id);
            }
        }
    } else if (Array.isArray(id) && id[0] == 'WINDOW') {
        if (isParent)
            elem = parent;
        else
            elem = window;
    } else if (Array.isArray(id) && id[0] == 'DOCUMENT') {
        if (isParent)
            elem = parent.document;
        else
            elem = document;
    } else if (Array.isArray(id) && id[0] == 'BODY') {
        if (isParent)
            elem = parent.document.body;
        else
            elem = document.body;
    } else if (Array.isArray(id) && id[0] == 'QUERYSELECTOR') {
        if (isParent)
            elem = parent.document.querySelector(id);
        else
            elem = document.querySelector(id);
    } else {
        if (isParent)
            elem = parent.document.getElementById(id);
        else
            elem = document.getElementById(id);
    }
    return elem;
}

// setHTMLElemAttribute puzzle
function setHTMLElemAttribute(attr, value, ids, isParent) {
    var elems = getElements(ids, isParent);
    for (var i = 0; i < elems.length; i++) {
        var elem = elems[i];
        if (!elem) continue;

        if ((attr == 'href' || attr == 'src') && value instanceof Promise) {
            // resolve promise value for url-based attributes
            value.then(function(response) {
                elem[attr] = response;
            });
        } else {
            elem[attr] = value;
        }
    }
}

// setHTMLElemStyle puzzle
function setHTMLElemStyle(prop, value, ids, isParent) {
    var elems = getElements(ids, isParent);
    for (var i = 0; i < elems.length; i++) {
        var elem = elems[i];
        if (!elem || !elem.style)
            continue;
        elem.style[prop] = value;
    }
}



// initSettings puzzle
_initGlob.output.initOptions.fadeAnnotations = false;
_initGlob.output.initOptions.useBkgTransp = true;
_initGlob.output.initOptions.preserveDrawBuf = true;
_initGlob.output.initOptions.useCompAssets = false;
_initGlob.output.initOptions.useFullscreen = false;


// initPreloader puzzle
_initGlob.output.initOptions.useCustomPreloader = true;
_initGlob.output.initOptions.preloaderStartCb = function() {
    _initGlob.percentage = 0;
    (function() {})();
};
_initGlob.output.initOptions.preloaderProgressCb = function(percentage) {
    _initGlob.percentage = percentage;
    (function() {
  setHTMLElemAttribute('style', ['Left',Math.round(_initGlob.percentage),'%'].join(''), '', false);
  setHTMLElemAttribute('innerHTML', ['',Math.round(_initGlob.percentage),'%'].join(''), 'loading-value', true);
  setHTMLElemStyle('width', ['',Math.round(_initGlob.percentage),'%'].join(''), 'loading-bar-inner', true);
})();
};
_initGlob.output.initOptions.preloaderEndCb = function() {
    _initGlob.percentage = 100;
    (function() {
  setHTMLElemStyle('display', 'none', 'preloader_div', true);
})();
};

    return _initGlob.output;
}

PL.init = function(appInstance, initOptions) {

// app is more conventional than appInstance (used in exec script and app templates)
var app = appInstance;

initOptions = initOptions || {};

if ('fadeAnnotations' in initOptions) {
    _pGlob.fadeAnnotations = initOptions.fadeAnnotations;
}

this.procedures["get_selected_objects"] = get_selected_objects;
this.procedures["show_main_layers"] = show_main_layers;
this.procedures["toggle_exp_view"] = toggle_exp_view;
this.procedures["go_back_to_initial_state"] = go_back_to_initial_state;
this.procedures["hide_info_buttons"] = hide_info_buttons;
this.procedures["isolate layers"] = isolate_layers;
this.procedures["hide objects"] = hide_objects;
this.procedures["hide_delivery_liner_layers"] = hide_delivery_liner_layers;
this.procedures["hide_value_statements"] = hide_value_statements;
this.procedures["show_variation_statements"] = show_variation_statements;
this.procedures["hide_ electrode_circuits"] = hide__electrode_circuits;
this.procedures["hide_skin_contact_layers"] = hide_skin_contact_layers;
this.procedures["hide_mobile_content"] = hide_mobile_content;
this.procedures["hide_peeling_display_images"] = hide_peeling_display_images;
this.procedures["hide_additional_info"] = hide_additional_info;
this.procedures["toggle_oversized_layers"] = toggle_oversized_layers;

var selected_peeling_image, mobile_content_selection, layer, is_exp_view, snap_connector_enabled, empty_camera_selection, variation_layer, oversized, obj, img, title, content, camera_position, LookAt, object_selection, is_initial_state, is_camera_tweening, look_at, skin_contact_layer_flush_cut, value_statement_selection, selected_skin_contact_layer, selected_electrode_circuit, skin_contact_layer_oversized, additional_info_selection, selected_delivery_liner, selected_device_electronics, selected_layer, snap_connectors_and_printed_trace;

// dictCreateWith puzzle
function dictCreateWith(keys, values) {
    const dict = {};

    keys = Array.isArray(keys) ? keys : keys.split(/\r?\n/).filter(key => key).map(key => key.trim());
    values = Array.isArray(values) ? values : values.split(/\r?\n/).map(key => key.trim());

    for (let i = 0; i < keys.length; i++) {
        dict[keys[i]] = values[i];
    }

    return dict;
}

// dictGet puzzle
function dictGet(dict, key) {
    if (dict && typeof dict == 'object')
        return dict[key];
}

// Describe this function...
function get_selected_objects(layer) {
  object_selection = dictCreateWith(['decorative_overlay', 'cover_layer', 'inner_cushion_layer', 'electrode_circuit', 'delivery_liner_layer', 'skin_contact_layer', 'construction_adhesive_layer', 'device_electronics_layer', 'conductive_electrodes'], ['Decorative_Overlay', 'Cover_Layer', 'Inner_Cushion_Layer_01', selected_electrode_circuit, selected_delivery_liner, selected_skin_contact_layer, 'PSA', selected_device_electronics, 'Conductive_Electrodes']);
  return dictGet(object_selection, layer);
}

// utility function envoked by almost all V3D-specific puzzles
// filter off some non-mesh types
function notIgnoredObj(obj) {
    return obj.type !== 'AmbientLight' &&
           obj.name !== '' &&
           !(obj.isMesh && obj.isMaterialGeneratedMesh) &&
           !obj.isAuxClippingMesh;
}


// utility function envoked by almost all V3D-specific puzzles
// find first occurence of the object by its name
function getObjectByName(objName) {
    var objFound;
    var runTime = _pGlob !== undefined;
    objFound = runTime ? _pGlob.objCache[objName] : null;

    if (objFound && objFound.name === objName)
        return objFound;

    if (appInstance.scene) {
        appInstance.scene.traverse(function(obj) {
            if (!objFound && notIgnoredObj(obj) && (obj.name == objName)) {
                objFound = obj;
                if (runTime) {
                    _pGlob.objCache[objName] = objFound;
                }
            }
        });
    }
    return objFound;
}


// utility function envoked by almost all V3D-specific puzzles
// retrieve all objects on the scene
function getAllObjectNames() {
    var objNameList = [];
    appInstance.scene.traverse(function(obj) {
        if (notIgnoredObj(obj))
            objNameList.push(obj.name)
    });
    return objNameList;
}


// utility function envoked by almost all V3D-specific puzzles
// retrieve all objects which belong to the group
function getObjectNamesByGroupName(targetGroupName) {
    var objNameList = [];
    appInstance.scene.traverse(function(obj){
        if (notIgnoredObj(obj)) {
            var groupNames = obj.groupNames;
            if (!groupNames)
                return;
            for (var i = 0; i < groupNames.length; i++) {
                var groupName = groupNames[i];
                if (groupName == targetGroupName) {
                    objNameList.push(obj.name);
                }
            }
        }
    });
    return objNameList;
}


// utility function envoked by almost all V3D-specific puzzles
// process object input, which can be either single obj or array of objects, or a group
function retrieveObjectNames(objNames) {
    var acc = [];
    retrieveObjectNamesAcc(objNames, acc);
    return acc.filter(function(name) {
        return name;
    });
}

function retrieveObjectNamesAcc(currObjNames, acc) {
    if (typeof currObjNames == "string") {
        acc.push(currObjNames);
    } else if (Array.isArray(currObjNames) && currObjNames[0] == "GROUP") {
        var newObj = getObjectNamesByGroupName(currObjNames[1]);
        for (var i = 0; i < newObj.length; i++)
            acc.push(newObj[i]);
    } else if (Array.isArray(currObjNames) && currObjNames[0] == "ALL_OBJECTS") {
        var newObj = getAllObjectNames();
        for (var i = 0; i < newObj.length; i++)
            acc.push(newObj[i]);
    } else if (Array.isArray(currObjNames)) {
        for (var i = 0; i < currObjNames.length; i++)
            retrieveObjectNamesAcc(currObjNames[i], acc);
    }
}

// outline puzzle
function outline(objSelector, doWhat) {
    var objNames = retrieveObjectNames(objSelector);

    if (!appInstance.postprocessing || !appInstance.postprocessing.outlinePass)
        return;
    var outlineArray = appInstance.postprocessing.outlinePass.selectedObjects;
    for (var i = 0; i < objNames.length; i++) {
        var objName = objNames[i];
        var obj = getObjectByName(objName);
        if (!obj)
            continue;
        if (doWhat == "ENABLE") {
            if (outlineArray.indexOf(obj) == -1)
                outlineArray.push(obj);
        } else {
            var index = outlineArray.indexOf(obj);
            if (index > -1)
                outlineArray.splice(index, 1);
        }
    }
}

// show and hide puzzles
function changeVis(objSelector, bool) {
    var objNames = retrieveObjectNames(objSelector);

    for (var i = 0; i < objNames.length; i++) {
        var objName = objNames[i]
        if (!objName)
            continue;
        var obj = getObjectByName(objName);
        if (!obj)
            continue;
        obj.visible = bool;
        obj.resolveMultiMaterial().forEach(function(objR) {
            objR.visible = bool;
        });
    }
}

// Describe this function...
function show_main_layers() {
  outline(['ALL_OBJECTS'], 'DISABLE');
  changeVis(['ALL_OBJECTS'], false);
  if (snap_connector_enabled == false) {
    changeVis(['Decorative_Overlay', 'Cover_Layer', 'Inner_Cushion_Layer_01', 'PSA', selected_device_electronics, selected_electrode_circuit, selected_skin_contact_layer, 'Conductive_Electrodes', selected_delivery_liner, 'Blue', null, null, null], true);
  } else {
    changeVis(['Decorative_Overlay', ['GROUP', 'Printed Trace (1-sided) using Snap Connectors'], selected_skin_contact_layer, 'Conductive_Electrodes', selected_delivery_liner, 'Blue'], true);
  }
  selected_layer = 'none';
}

// utility functions envoked by the HTML puzzles
function getElements(ids, isParent) {
    var elems = [];
    if (Array.isArray(ids) && ids[0] != 'CONTAINER' && ids[0] != 'WINDOW' &&
        ids[0] != 'DOCUMENT' && ids[0] != 'BODY' && ids[0] != 'QUERYSELECTOR') {
        for (var i = 0; i < ids.length; i++)
            elems.push(getElement(ids[i], isParent));
    } else {
        elems.push(getElement(ids, isParent));
    }
    return elems;
}

function getElement(id, isParent) {
    var elem;
    if (Array.isArray(id) && id[0] == 'CONTAINER') {
        if (appInstance !== null) {
            elem = appInstance.container;
        } else if (typeof _initGlob !== 'undefined') {
            // if we are on the initialization stage, we still can have access
            // to the container element
            var id = _initGlob.container;
            if (isParent) {
                elem = parent.document.getElementById(id);
            } else {
                elem = document.getElementById(id);
            }
        }
    } else if (Array.isArray(id) && id[0] == 'WINDOW') {
        if (isParent)
            elem = parent;
        else
            elem = window;
    } else if (Array.isArray(id) && id[0] == 'DOCUMENT') {
        if (isParent)
            elem = parent.document;
        else
            elem = document;
    } else if (Array.isArray(id) && id[0] == 'BODY') {
        if (isParent)
            elem = parent.document.body;
        else
            elem = document.body;
    } else if (Array.isArray(id) && id[0] == 'QUERYSELECTOR') {
        if (isParent)
            elem = parent.document.querySelector(id);
        else
            elem = document.querySelector(id);
    } else {
        if (isParent)
            elem = parent.document.getElementById(id);
        else
            elem = document.getElementById(id);
    }
    return elem;
}

// setHTMLElemStyle puzzle
function setHTMLElemStyle(prop, value, ids, isParent) {
    var elems = getElements(ids, isParent);
    for (var i = 0; i < elems.length; i++) {
        var elem = elems[i];
        if (!elem || !elem.style)
            continue;
        elem.style[prop] = value;
    }
}

function _checkListenersSame(target0, type0, listener0, optionsOrUseCapture0,
        target1, type1, listener1, optionsOrUseCapture1) {
    const capture0 = Boolean(optionsOrUseCapture0 instanceof Object
            ? optionsOrUseCapture0.capture : optionsOrUseCapture0);
    const capture1 = Boolean(optionsOrUseCapture1 instanceof Object
            ? optionsOrUseCapture1.capture : optionsOrUseCapture1);
    return target0 === target1 && type0 === type1 && listener0 === listener1
            && capture0 === capture1;
}

/**
 * Add the specified event listener to the specified target. This function also
 * stores listener data for easier disposing.
 */
function bindListener(target, type, listener, optionsOrUseCapture) {
    const alreadyExists = _pGlob.eventListeners.some(elem => {
        return _checkListenersSame(elem.target, elem.type, elem.listener,
                elem.optionsOrUseCapture, target, type, listener,
                optionsOrUseCapture);
    });

    if (!alreadyExists) {
        target.addEventListener(type, listener, optionsOrUseCapture);
        _pGlob.eventListeners.push({ target, type, listener, optionsOrUseCapture });
    }
}

// eventHTMLElem puzzle
function eventHTMLElem(eventType, ids, isParent, callback) {
    var elems = getElements(ids, isParent);
    for (var i = 0; i < elems.length; i++) {
        var elem = elems[i];
        if (!elem)
            continue;

        bindListener(elem, eventType, callback);
    }
}

// autoRotateCamera puzzle
function autoRotateCamera(enabled, speed) {

    if (appInstance.controls && appInstance.controls instanceof v3d.OrbitControls) {
        appInstance.controls.autoRotate = enabled;
        appInstance.controls.autoRotateSpeed = speed;
    } else {
        console.error('autorotate camera: Wrong controls type');
    }
}

function setScreenScale(factor) {

    // already have maximum pixel ratio in HiDPI mode
    if (!appInstance.useHiDPIRenderPass)
        appInstance.renderer.setPixelRatio(factor);

    if (appInstance.postprocessing)
        appInstance.postprocessing.composer.setPixelRatio(factor);

    // to update possible post-processing passes
    appInstance.onResize();
}

// createVector puzzle
function createVector(x, y, z) {
    return [x, y, z];
};

// getAnimations puzzle
function getAnimations(objSelector) {
    const objNames = retrieveObjectNames(objSelector);

    const animations = [];
    for (let i = 0; i < objNames.length; i++) {
        const objName = objNames[i];
        if (!objName)
            continue;
        // use objName as animName - for now we have one-to-one match
        const action = v3d.SceneUtils.getAnimationActionByName(appInstance, objName);
        if (action)
            animations.push(objName);
    }
    return animations;
}

/**
 * Get a scene that contains the root of the given action.
 */
function getSceneByAction(action) {
    var root = action.getRoot();
    var scene = root.type == "Scene" ? root : null;
    root.traverseAncestors(function(ancObj) {
        if (ancObj.type == "Scene") {
            scene = ancObj;
        }
    });
    return scene;
}

/**
 * Get the current scene's framerate.
 */
function getSceneAnimFrameRate(scene) {
    if (scene && 'animFrameRate' in scene.userData) {
        return scene.userData.animFrameRate;
    }
    return 24;
}

_pGlob.animMixerCallbacks = [];

var initAnimationMixer = function() {

    function onMixerFinished(e) {
        var cb = _pGlob.animMixerCallbacks;
        var found = [];
        for (var i = 0; i < cb.length; i++) {
            if (cb[i][0] == e.action) {
                cb[i][0] = null; // desactivate
                found.push(cb[i][1]);
            }
        }
        for (var i = 0; i < found.length; i++) {
            found[i]();
        }
    }

    return function initAnimationMixer() {
        if (appInstance.mixer && !appInstance.mixer.hasEventListener('finished', onMixerFinished)) {
            bindListener(appInstance.mixer, 'finished', onMixerFinished);
        }
    };

}();

// animation puzzles
function operateAnimation(operation, animations, from, to, loop, speed, callback, rev) {
    if (!animations)
        return;
    // input can be either single obj or array of objects
    if (typeof animations == "string")
        animations = [animations];

    function processAnimation(animName) {
        var action = v3d.SceneUtils.getAnimationActionByName(appInstance, animName);
        if (!action)
            return;
        switch (operation) {
        case 'PLAY':
            if (!action.isRunning()) {
                action.reset();
                if (loop && (loop != "AUTO"))
                    action.loop = v3d[loop];
                var scene = getSceneByAction(action);
                var frameRate = getSceneAnimFrameRate(scene);

                action.repetitions = Infinity;

                var timeScale = Math.abs(parseFloat(speed));
                if (rev)
                    timeScale *= -1;

                action.timeScale = timeScale;
                action.timeStart = from !== null ? from/frameRate : 0;
                if (to !== null) {
                    action.getClip().duration = to/frameRate;
                } else {
                    action.getClip().resetDuration();
                }
                action.time = timeScale >= 0 ? action.timeStart : action.getClip().duration;

                action.paused = false;
                action.play();

                // push unique callbacks only
                var callbacks = _pGlob.animMixerCallbacks;
                var found = false;

                for (var j = 0; j < callbacks.length; j++)
                    if (callbacks[j][0] == action && callbacks[j][1] == callback)
                        found = true;

                if (!found)
                    _pGlob.animMixerCallbacks.push([action, callback]);
            }
            break;
        case 'STOP':
            action.stop();

            // remove callbacks
            var callbacks = _pGlob.animMixerCallbacks;
            for (var j = 0; j < callbacks.length; j++)
                if (callbacks[j][0] == action) {
                    callbacks.splice(j, 1);
                    j--
                }

            break;
        case 'PAUSE':
            action.paused = true;
            break;
        case 'RESUME':
            action.paused = false;
            break;
        case 'SET_FRAME':
            var scene = getSceneByAction(action);
            var frameRate = getSceneAnimFrameRate(scene);
            action.time = from ? from/frameRate : 0;
            action.play();
            action.paused = true;
            break;
        case 'SET_SPEED':
            var timeScale = parseFloat(speed);
            action.timeScale = rev ? -timeScale : timeScale;
            break;
        }
    }

    for (var i = 0; i < animations.length; i++) {
        var animName = animations[i];
        if (animName)
            processAnimation(animName);
    }

    initAnimationMixer();
}

// setTimeout puzzle
function registerSetTimeout(timeout, callback) {
    window.setTimeout(callback, 1000 * timeout);
}

/**
 * Retrieve coordinate system from the loaded scene
 */
function getCoordSystem() {
    var scene = appInstance.scene;

    if (scene && 'coordSystem' in scene.userData) {
        return scene.userData.coordSystem;
    }

    return 'Y_UP_RIGHT';
}


/**
 * Transform coordinates from one space to another
 * Can be used with Vector3 or Euler.
 */
function coordsTransform(coords, from, to, noSignChange) {

    if (from == to)
        return coords;

    var y = coords.y, z = coords.z;

    if (from == 'Z_UP_RIGHT' && to == 'Y_UP_RIGHT') {
        coords.y = z;
        coords.z = noSignChange ? y : -y;
    } else if (from == 'Y_UP_RIGHT' && to == 'Z_UP_RIGHT') {
        coords.y = noSignChange ? z : -z;
        coords.z = y;
    } else {
        console.error('coordsTransform: Unsupported coordinate space');
    }

    return coords;
}


/**
 * Verge3D euler rotation to Blender/Max shortest.
 * 1) Convert from intrinsic rotation (v3d) to extrinsic XYZ (Blender/Max default
 *    order) via reversion: XYZ -> ZYX
 * 2) swizzle ZYX->YZX
 * 3) choose the shortest rotation to resemble Blender's behavior
 */
const eulerV3DToBlenderShortest = function() {

    const eulerTmp = new v3d.Euler();
    const eulerTmp2 = new v3d.Euler();
    const vec3Tmp = new v3d.Vector3();

    return function(euler, dest) {

        const eulerBlender = eulerTmp.copy(euler).reorder('YZX');
        const eulerBlenderAlt = eulerTmp2.copy(eulerBlender).makeAlternative();

        const len = vec3Tmp.setFromEuler(eulerBlender).lengthSq();
        const lenAlt = vec3Tmp.setFromEuler(eulerBlenderAlt).lengthSq();

        dest.copy(len < lenAlt ? eulerBlender : eulerBlenderAlt);
        return coordsTransform(dest, 'Y_UP_RIGHT', 'Z_UP_RIGHT');
    }

}();

// tweenCamera puzzle
function tweenCamera(posOrObj, targetOrObj, duration, doSlot, movementType) {
    var camera = appInstance.getCamera();

    if (Array.isArray(posOrObj)) {
        var worldPos = _pGlob.vec3Tmp.fromArray(posOrObj);
        worldPos = coordsTransform(worldPos, getCoordSystem(), 'Y_UP_RIGHT');
    } else if (posOrObj) {
        var posObj = getObjectByName(posOrObj);
        if (!posObj) return;
        var worldPos = posObj.getWorldPosition(_pGlob.vec3Tmp);
    } else {
        // empty input means: don't change the position
        var worldPos = camera.getWorldPosition(_pGlob.vec3Tmp);
    }

    if (Array.isArray(targetOrObj)) {
        var worldTarget = _pGlob.vec3Tmp2.fromArray(targetOrObj);
        worldTarget = coordsTransform(worldTarget, getCoordSystem(), 'Y_UP_RIGHT');
    } else {
        var targObj = getObjectByName(targetOrObj);
        if (!targObj) return;
        var worldTarget = targObj.getWorldPosition(_pGlob.vec3Tmp2);
    }

    duration = Math.max(0, duration);

    if (appInstance.controls && appInstance.controls.tween) {
        // orbit and flying cameras
        if (!appInstance.controls.inTween) {
            appInstance.controls.tween(worldPos, worldTarget, duration, doSlot,
                    movementType);
        }
    } else {
        // TODO: static camera, just position it for now
        if (camera.parent) {
            camera.parent.worldToLocal(worldPos);
        }
        camera.position.copy(worldPos);
        camera.lookAt(worldTarget);
        doSlot();
    }
}

// Describe this function...
function toggle_exp_view() {
  hide_additional_info();
  hide_info_buttons();
  hide_mobile_content();
  hide_peeling_display_images();
  is_camera_tweening = true;
  if (is_exp_view == false) {
    setHTMLElemStyle('display', 'none', 'go_back', true);
    setHTMLElemStyle('display', 'none', 'toggle_off', true);
    setHTMLElemStyle('display', 'block', 'toggle_on', true);
    tweenCamera('cam_full_view', 'cam_center_point', 2, function() {}, 1);

    operateAnimation('PLAY', getAnimations(['GROUP', 'Exploded_View']), 1, 49, 'LoopOnce', 1,
            function() {
      if (snap_connector_enabled == true) {

        operateAnimation('PLAY', getAnimations(['GROUP', 'Printed Trace (1-sided) using Snap Connectors']), 101, 150, 'LoopOnce', 1.2,
                function() {
          is_camera_tweening = false;
        }, false);

            } else {
        is_camera_tweening = false;
      }
    }, false);

        is_exp_view = true;
    is_initial_state = true;
  } else if (is_exp_view == true) {
    setHTMLElemStyle('display', 'none', 'go_back', true);
    setHTMLElemStyle('display', 'none', 'toggle_on', true);
    setHTMLElemStyle('display', 'block', 'toggle_off', true);
    if (snap_connector_enabled == true) {

      operateAnimation('PLAY', getAnimations(['GROUP', 'Printed Trace (1-sided) using Snap Connectors']), 101, 150, 'LoopOnce', 1.1,
              function() {}, true);

          }
    registerSetTimeout(0.2, function() {
      tweenCamera('cam_full_view', 'cam_center_point', 2, function() {}, 1);

      operateAnimation('PLAY', getAnimations(['GROUP', 'Exploded_View']), 1, 49, 'LoopOnce', 1,
              function() {
        is_exp_view = false;
        is_camera_tweening = false;
      }, true);

          });
    is_initial_state = true;
  }
}

// Describe this function...
function go_back_to_initial_state() {
  show_main_layers();
  hide_additional_info();
  hide_mobile_content();
  hide_value_statements();
  hide_info_buttons();
  hide_peeling_display_images();
  setHTMLElemStyle('display', 'none', 'go_back', true);
  is_camera_tweening = true;

  operateAnimation('PLAY', getAnimations(['GROUP', 'Exploded_View']), 1, 49, 'LoopOnce', 1,
          function() {
    setHTMLElemStyle('display', 'none', 'toggle_off', true);
    setHTMLElemStyle('display', 'block', 'toggle_on', true);

    operateAnimation('PLAY', getAnimations(['GROUP', 'Printed Trace (1-sided) using Snap Connectors']), 101, 150, 'LoopOnce', 1,
            function() {}, false);

        }, false);

      tweenCamera('cam_full_view', 'cam_center_point', 1, function() {
    is_exp_view = true;
    is_initial_state = true;
    is_camera_tweening = false;
  }, 1);
}

// Describe this function...
function hide_info_buttons() {
  setHTMLElemStyle('display', 'none', 'go_back', true);
  setHTMLElemStyle('display', 'none', 'additional_info_button', true);
  setHTMLElemStyle('display', 'none', 'additional_info_button_mobile', true);
  setHTMLElemStyle('display', 'none', 'additional_info_pressed_button', true);
  setHTMLElemStyle('display', 'none', 'additional_info_pressed_button_mobile', true);
}

// featureAvailable puzzle
function featureAvailable(feature) {

    var userAgent = window.navigator.userAgent;
    var platform = window.navigator.platform;

    switch (feature) {
    case 'LINUX':
        return /Linux/.test(platform);
    case 'WINDOWS':
        return ['Win32', 'Win64', 'Windows', 'WinCE'].indexOf(platform) !== -1;
    case 'MACOS':
        return (['Macintosh', 'MacIntel', 'MacPPC', 'Mac68K'].indexOf(platform) !== -1 && !v3d.Detector.checkIOS());
    case 'IOS':
        return v3d.Detector.checkIOS();
    case 'ANDROID':
        return /Android/i.test(userAgent);
    case 'MOBILE':
        return (/Android|webOS|BlackBerry/i.test(userAgent) || v3d.Detector.checkIOS());

    case 'CHROME':
        // Chromium based
        return (!!window.chrome && !/Edge/.test(navigator.userAgent));
    case 'FIREFOX':
        return /Firefox/.test(navigator.userAgent);
    case 'IE':
        return /Trident/.test(navigator.userAgent);
    case 'EDGE':
        return /Edge/.test(navigator.userAgent);
    case 'SAFARI':
        return (/Safari/.test(navigator.userAgent) && !/Chrome/.test(navigator.userAgent));

    case 'TOUCH':
        return !!(('ontouchstart' in window) || window.DocumentTouch && document instanceof DocumentTouch);
    case 'RETINA':
        return window.devicePixelRatio >= 2;
    case 'HDR':
        return appInstance.useHDR;
    case 'WEBAUDIO':
        return v3d.Detector.checkWebAudio();
    case 'WEBGL':
        var canvas = document.createElement('canvas');
        var gl = canvas.getContext('webgl')
        return !!gl;
    case 'WEBGL2':
        var canvas = document.createElement('canvas');
        var gl = canvas.getContext('webgl2')
        return !!gl;
    case 'WOOCOMMERCE':
        var woo_fun = window.parent.v3d_woo_get_product_info || window.parent.parent.v3d_woo_get_product_info;
        return !!woo_fun;
    case 'DO_NOT_TRACK':
        if (navigator.doNotTrack == '1' || window.doNotTrack == '1')
            return true;
        else
            return false;
    default:
        return false;
    }

}

// Describe this function...
function isolate_layers(layer) {
  show_main_layers();
  hide_value_statements();
  hide_additional_info();
  hide_mobile_content();
  hide_peeling_display_images();
  hide_info_buttons();
  is_camera_tweening = true;
  if (is_exp_view == true) {
    tweenCamera(dictGet(empty_camera_selection, layer), dictGet(look_at, layer), 2.5, function() {
      hide_objects();
      changeVis(get_selected_objects(layer), true);
      autoRotateCamera(true, 0.6);
      if (featureAvailable('MOBILE')) {
        setHTMLElemStyle('display', 'block', 'additional_info_button_mobile', true);
        setHTMLElemStyle('display', 'block', dictGet(mobile_content_selection, layer), true);
      } else {
        setHTMLElemStyle('display', 'flex', 'value_statements_block', true);
        setHTMLElemStyle('display', 'flex', dictGet(value_statement_selection, layer), true);
        if (dictGet(additional_info_selection, layer) != 'disabled') {
          setHTMLElemStyle('display', 'block', 'additional_info_button', true);
          setHTMLElemStyle('display', 'block', dictGet(additional_info_selection, layer), true);
        }
      }
      setHTMLElemStyle('display', 'block', 'go_back', true);
      is_camera_tweening = false;
    }, 1);
    outline(get_selected_objects(layer), 'ENABLE');
  } else {
    tweenCamera(dictGet(empty_camera_selection, layer), dictGet(look_at, layer), 2.5, function() {
      registerSetTimeout(0.2, function() {
        hide_objects();
      });
      registerSetTimeout(0.2, function() {
        changeVis(get_selected_objects(layer), true);
      });
      autoRotateCamera(true, 0.6);
      if (featureAvailable('MOBILE')) {
        setHTMLElemStyle('display', 'block', 'additional_info_button_mobile', true);
        setHTMLElemStyle('display', 'block', dictGet(mobile_content_selection, layer), true);
      } else {
        setHTMLElemStyle('display', 'flex', 'value_statements_block', true);
        setHTMLElemStyle('display', 'flex', dictGet(value_statement_selection, layer), true);
        if (dictGet(additional_info_selection, layer) != 'disabled') {
          setHTMLElemStyle('display', 'block', 'additional_info_button', true);
          setHTMLElemStyle('display', 'block', dictGet(additional_info_selection, layer), true);
        }
      }
      setHTMLElemStyle('display', 'block', 'go_back', true);
      is_camera_tweening = false;
    }, 1);
  }
  is_initial_state = false;
  selected_layer = layer;
}

// Describe this function...
function hide_objects() {
  changeVis(['ALL_OBJECTS'], false);
  changeVis('Blue', true);
  outline(['ALL_OBJECTS'], 'DISABLE');
  hide_peeling_display_images();
}

// assignMaterial puzzle
function assignMat(objSelector, matName) {
    var objNames = retrieveObjectNames(objSelector);
    if (!matName)
        return;
    var mat = v3d.SceneUtils.getMaterialByName(appInstance, matName);
    if (!mat)
        return;
    for (var i = 0; i < objNames.length; i++) {
        var objName = objNames[i];
        if (!objName)
            continue;
        var obj = getObjectByName(objName);
        if (obj) {
            var firstSubmesh = obj.resolveMultiMaterial()[0];
            firstSubmesh.material = mat;
        }
    }
}

// Describe this function...
function hide_delivery_liner_layers() {
  changeVis(['Delivery_Liner_Oversized_Liner_High_Poly', 'Delivery_Liner_Split_Liner', 'Delivery_Liner_Split__Folded_Liner', 'Delivery_Liner_Serpentine_Layer'], false);
}

// Describe this function...
function hide_value_statements() {
  setHTMLElemStyle('display', 'none', ['value_statements_block', 'decorative_overlay_value_statement', 'variations_decorative_overlay_value_statement', 'cover_layer_value_statement', 'variations_cover_layer_value_statement', 'inner_cushion_layer_value_statement', 'psa_layer_value_statement', 'device_electronics_value_statement', 'electrode_circuit_value_statement', 'skin_contact_layer_value_statement', 'variations_skin_contact_layer_value_statement', 'conductive_electrodes_value_statement', 'delivery_liner_value_statement'], true);
}

// Describe this function...
function show_variation_statements(variation_layer) {
  hide_value_statements();
  hide_mobile_content();
  if (featureAvailable('MOBILE')) {
    setHTMLElemStyle('display', 'block', 'additional_info_button_mobile', true);
    setHTMLElemStyle('display', 'block', dictGet(mobile_content_selection, variation_layer), true);
  } else {
    setHTMLElemStyle('display', 'flex', 'value_statements_block', true);
    setHTMLElemStyle('display', 'flex', dictGet(value_statement_selection, variation_layer), true);
  }
}

// Describe this function...
function hide__electrode_circuits() {
  changeVis(['Printed Flex (1-Sided)_01', 'Printed Flex (2-Sided)', ['GROUP', 'Printed Trace (1-sided) using Snap Connectors'], 'Conductive Trace Circuit'], false);
}

// Describe this function...
function hide_skin_contact_layers() {
  changeVis(['Skin_Contact_layer_Oversized', 'Stick_To_Skin_Adhessive_Oversized', 'Skin_Contact_layer', 'Stick_To_Skin_Adhessive'], false);
}

// Describe this function...
function hide_mobile_content() {
  setHTMLElemStyle('display', 'none', ['content_wrapper_mobile_block', 'content_mobile_decorative_layer', 'content_mobile_variations_decorative_layer', 'content_mobile_cover_layer', 'content_mobile_variations_cover_layer', 'content_mobile_inner_cushion_layer', 'content_mobile_psa_layer', 'content_mobile_device_electronics', 'content_mobile_electrode_circuit', 'content_mobile_skin_contact_layer', 'content_mobile_variations_skin_contact_layer', 'content_mobile_conductive_electrodes', 'content_mobile_delivery_liner'], true);
}

// Describe this function...
function hide_peeling_display_images() {
  setHTMLElemStyle('display', 'none', 'folded_liner_image', true);
  setHTMLElemStyle('display', 'none', 'split_liner_image', true);
  setHTMLElemStyle('display', 'none', 'serpentine_liner_image', true);
}

// Describe this function...
function hide_additional_info() {
  setHTMLElemStyle('display', 'none', ['additional_info_block', 'additional_info_electrode_circuit', 'additional_info_skin_contact_layer', 'additional_info_conductive_electrodes', 'additional_info_device_electronics'], true);
}

// Describe this function...
function toggle_oversized_layers(oversized) {
  if (oversized == true) {
    selected_skin_contact_layer = skin_contact_layer_oversized;
    selected_delivery_liner = 'Delivery_Liner_Oversized_Liner_High_Poly';
  } else {
    if (selected_delivery_liner == 'Delivery_Liner_Oversized_Liner_High_Poly') {
      selected_delivery_liner = 'Delivery_Liner_Split_Liner';
    }
    selected_skin_contact_layer = skin_contact_layer_flush_cut;
  }
  registerSetTimeout(0.2, function() {
    if (is_initial_state == true) {
      hide_skin_contact_layers();
      hide_delivery_liner_layers();
      changeVis(selected_skin_contact_layer, true);
      changeVis(selected_delivery_liner, true);
    } else {
      if (selected_layer == 'skin_contact_layer') {
        hide_objects();
        changeVis(selected_skin_contact_layer, true);
      } else if (selected_layer == 'delivery_liner_layer') {
        hide_objects();
        changeVis(selected_delivery_liner, true);
        setHTMLElemStyle('display', 'block', dictGet(selected_peeling_image, selected_delivery_liner), true);
      }
    }
  });
}

// zoomCamera puzzle
function zoomCamera(objSelector, duration, doSlot) {

    duration = Math.max(0, duration);

    const objNames = retrieveObjectNames(objSelector);

    const zoomObjects = [];
    objNames.forEach(function(name) {
        const obj = getObjectByName(name);
        if (obj) {
            zoomObjects.push(obj);
        }
    });

    if (!zoomObjects.length) {
        return;
    }

    const camera = appInstance.getCamera();

    const zoom = [camera.zoom]; // for orthographic camera only

    const pos = _pGlob.vec3Tmp, target = _pGlob.vec3Tmp2;
    v3d.CameraUtils.calcCameraZoomToObjectsParams(camera, zoomObjects,
            pos, target, zoom);

    if (appInstance.controls && appInstance.controls.tween) {
        // orbit and flying cameras
        if (!appInstance.controls.inTween) {
            if (camera.isOrthographicCamera) {
                appInstance.controls.tweenZoomTo(target, zoom[0],
                        duration, doSlot);
            } else {
                appInstance.controls.tween(pos, target, duration, doSlot);
            }
        }
    } else {
        // TODO: static camera, just position it for now
        if (camera.parent) {
            camera.parent.worldToLocal(pos);
        }
        camera.position.copy(pos);
        camera.lookAt(target);
        camera.zoom = zoom[0];
        camera.updateProjectionMatrix();
        doSlot();
    }
}


selected_peeling_image = dictCreateWith(['Delivery_Liner_Split_Liner', 'Delivery_Liner_Split__Folded_Liner', 'Delivery_Liner_Serpentine_Layer'], ['split_liner_image', 'folded_liner_image', 'serpentine_liner_image']);

mobile_content_selection = dictCreateWith(['decorative_overlay', 'variations_decorative_overlay', 'cover_layer', 'variations_cover_layer', 'inner_cushion_layer', 'construction_adhesive_layer', 'device_electronics_layer', 'electrode_circuit', 'skin_contact_layer', 'variations_skin_contact_layer', 'conductive_electrodes', 'delivery_liner_layer'], ['content_mobile_decorative_layer', 'content_mobile_variations_decorative_layer', 'content_mobile_cover_layer', 'content_mobile_variations_cover_layer', 'content_mobile_inner_cushion_layer', 'content_mobile_psa_layer', 'content_mobile_device_electronics', 'content_mobile_electrode_circuit', 'content_mobile_skin_contact_layer', 'content_mobile_variations_skin_contact_layer', 'content_mobile_conductive_electrodes', 'content_mobile_delivery_liner']);

setHTMLElemStyle('display', 'none', 'go_back', true);
setHTMLElemStyle('display', 'none', 'modal', true);
eventHTMLElem('click', 'go_back', true, function(event) {
  go_back_to_initial_state();
});
eventHTMLElem('click', 'exp_view', true, function(event) {
  show_main_layers();
  hide_value_statements();
  if (is_camera_tweening == false) {
    toggle_exp_view();
  }
  hide_additional_info();
  hide_mobile_content();
  hide_info_buttons();
  hide_peeling_display_images();
});

is_exp_view = true;
is_initial_state = true;
skin_contact_layer_flush_cut = ['Skin_Contact_layer', 'Stick_To_Skin_Adhessive'];
skin_contact_layer_oversized = ['Skin_Contact_layer_Oversized', 'Stick_To_Skin_Adhessive_Oversized'];
selected_device_electronics = ['BATTERY', 'Joint', 'PCB', 'IC', 'PCB_Bulb', 'PCB_Front', 'PCB_Backside'];
selected_skin_contact_layer = skin_contact_layer_oversized;
selected_electrode_circuit = 'Printed Flex (1-Sided)_01';
selected_delivery_liner = 'Delivery_Liner_Oversized_Liner_High_Poly';
snap_connectors_and_printed_trace = ['Screw_Female_01', 'Screw_Female_02', 'Screw_Female_03', 'Screw_Female_04', 'Screw_Male_01', 'Screw_Male_02', 'Screw_Male_03', 'Screw_Male_04', 'Printed Trace (1-sided) using Snap Connectors'];

autoRotateCamera(true, 3);

snap_connector_enabled = false;
is_camera_tweening = false;

show_main_layers();

hide_info_buttons();

setScreenScale(1.5);

empty_camera_selection = dictCreateWith(['decorative_overlay', 'cover_layer', 'inner_cushion_layer', 'construction_adhesive_layer', 'device_electronics_layer', 'electrode_circuit', 'skin_contact_layer', 'conductive_electrodes', 'delivery_liner_layer'], [createVector(0.25, -0.4, 0.06), createVector(0.2, -0.32, 0.06), createVector(0.2, -0.2, 0.06), createVector(0.2, -0.15, 0.06), createVector(0.2, -0.1, 0.06), createVector(0.2, 0.2, 0.06), createVector(0.2, -0.25, 0.06), createVector(0.2, -0.25, 0.06), createVector(0.12, 0.4, 0.06)]);
look_at = dictCreateWith(['decorative_overlay', 'cover_layer', 'inner_cushion_layer', 'construction_adhesive_layer', 'device_electronics_layer', 'electrode_circuit', 'skin_contact_layer', 'conductive_electrodes', 'delivery_liner_layer'], ['Decorative_Overlay', 'Cover_Layer', 'Inner_Cushion_Layer_01', 'PSA', 'BATTERY', 'Printed Flex (2-Sided)', 'Skin_Contact_layer', 'Conductive_Electrodes', 'Delivery_Liner_Serpentine_Layer']);
value_statement_selection = dictCreateWith(['decorative_overlay', 'variations_decorative_overlay', 'cover_layer', 'variations_cover_layer', 'inner_cushion_layer', 'construction_adhesive_layer', 'device_electronics_layer', 'electrode_circuit', 'skin_contact_layer', 'variations_skin_contact_layer', 'conductive_electrodes', 'delivery_liner_layer'], ['decorative_overlay_value_statement', 'variations_decorative_overlay_value_statement', 'cover_layer_value_statement', 'variations_cover_layer_value_statement', 'inner_cushion_layer_value_statement', 'psa_layer_value_statement', 'device_electronics_value_statement', 'electrode_circuit_value_statement', 'skin_contact_layer_value_statement', 'variations_skin_contact_layer_value_statement', 'conductive_electrodes_value_statement', 'delivery_liner_value_statement']);
additional_info_selection = dictCreateWith(['decorative_overlay', 'cover_layer', 'inner_cushion_layer', 'construction_adhesive_layer', 'device_electronics_layer', 'electrode_circuit', 'skin_contact_layer', 'conductive_electrodes', 'delivery_liner_layer'], ['disabled', 'disabled', 'disabled', 'disabled', 'additional_info_device_electronics', 'additional_info_electrode_circuit', 'additional_info_skin_contact_layer', 'additional_info_conductive_electrodes', 'disabled']);

registerSetTimeout(5, function() {

  operateAnimation('PLAY', getAnimations(['GROUP', 'Exploded_View']), 1, 49, 'LoopOnce', 1,
          function() {
    setHTMLElemStyle('display', 'none', 'toggle_off', true);
    setHTMLElemStyle('display', 'block', 'toggle_on', true);
    autoRotateCamera(true, 0.6);
    is_exp_view = true;
  }, false);

      });

eventHTMLElem('click', 'decorative_overlay', true, function(event) {
  if (is_camera_tweening == false) {
    isolate_layers('decorative_overlay');
  }
});
eventHTMLElem('click', 'cover_layer', true, function(event) {
  if (is_camera_tweening == false) {
    isolate_layers('cover_layer');
  }
});
eventHTMLElem('click', 'inner_cushion_layer', true, function(event) {
  if (is_camera_tweening == false) {
    isolate_layers('inner_cushion_layer');
  }
});
eventHTMLElem('click', 'construction_adhesive_layer', true, function(event) {
  if (is_camera_tweening == false) {
    isolate_layers('construction_adhesive_layer');
  }
});
eventHTMLElem('click', 'device_electronics_layer', true, function(event) {
  if (is_camera_tweening == false) {
    isolate_layers('device_electronics_layer');
  }
});
eventHTMLElem('click', 'electrode_circuit', true, function(event) {
  if (is_camera_tweening == false) {
    isolate_layers('electrode_circuit');
  }
});
eventHTMLElem('click', 'skin_contact_layer', true, function(event) {
  if (is_camera_tweening == false) {
    isolate_layers('skin_contact_layer');
  }
});
eventHTMLElem('click', 'conductive_electrodes', true, function(event) {
  if (is_camera_tweening == false) {
    isolate_layers('conductive_electrodes');
  }
});

setHTMLElemStyle('display', 'none', 'content_wrapper_mobile_block', true);
eventHTMLElem('click', 'additional_info_close_icon', true, function(event) {
  setHTMLElemStyle('display', 'none', 'additional_info_block', true);
  setHTMLElemStyle('display', 'block', 'additional_info_button', true);
  setHTMLElemStyle('display', 'flex', 'value_statements_block', true);
});
eventHTMLElem('click', 'additional_info_close_icon_mobile', true, function(event) {
  setHTMLElemStyle('display', 'none', 'content_wrapper_mobile_block', true);
  setHTMLElemStyle('display', 'none', 'additional_info_pressed_button_mobile', true);
  setHTMLElemStyle('display', 'block', 'additional_info_button_mobile', true);
});
eventHTMLElem('click', 'additional_info_button', true, function(event) {
  setHTMLElemStyle('display', 'none', 'additional_info_button', true);
  setHTMLElemStyle('display', 'block', 'additional_info_block', true);
  setHTMLElemStyle('display', 'block', 'additional_info_pressed_button', true);
  setHTMLElemStyle('display', 'none', 'value_statements_block', true);
});
eventHTMLElem('click', 'additional_info_button_mobile', true, function(event) {
  setHTMLElemStyle('display', 'none', 'additional_info_button_mobile', true);
  setHTMLElemStyle('display', 'block', 'content_wrapper_mobile_block', true);
  setHTMLElemStyle('display', 'block', 'additional_info_pressed_button_mobile', true);
});

eventHTMLElem('click', 'decorative_overlay_film', true, function(event) {
  assignMat('Decorative_Overlay', 'Decorative_Overlay_Film');
  if (selected_layer == 'decorative_overlay') {
    show_variation_statements('variations_decorative_overlay');
  }
});
eventHTMLElem('click', 'decorative_overlay_nonwoven_spunlace', true, function(event) {
  assignMat('Decorative_Overlay', 'Decorative_Overlay_Spun_Woven');
  if (selected_layer == 'decorative_overlay') {
    show_variation_statements('variations_decorative_overlay');
  }
});
eventHTMLElem('click', 'decorative_overlay_tech_fabric', true, function(event) {
  assignMat('Decorative_Overlay', 'Decorative_Overlay_Fabric_Tech');
  if (selected_layer == 'decorative_overlay') {
    show_variation_statements('variations_decorative_overlay');
  }
});
eventHTMLElem('click', 'cover_layer_foam', true, function(event) {
  assignMat('Cover_Layer', 'Material_Cover_Layer_Foam_Lights_ON');
  if (selected_layer == 'cover_layer') {
    show_variation_statements('variations_cover_layer');
  }
});
eventHTMLElem('click', 'cover_layer_molded_elastomer', true, function(event) {
  assignMat('Cover_Layer', 'Material_Cover_Layer_Molded_Rubber_Lights_ON');
  if (selected_layer == 'cover_layer') {
    show_variation_statements('variations_cover_layer');
  }
});
eventHTMLElem('click', 'cover_layer_comfortable_film', true, function(event) {
  assignMat('Cover_Layer', 'Material_Cover_Layer_Polycarbonate_Lights_ON');
  if (selected_layer == 'cover_layer') {
    show_variation_statements('variations_cover_layer');
  }
});
eventHTMLElem('click', 'inner_cushion_layer_molded_silicon', true, function(event) {
  assignMat('Inner_Cushion_Layer_01', 'Material_inner_Cushion_Blue');
});
eventHTMLElem('click', 'inner_cushion_layer_foam', true, function(event) {
  assignMat('Inner_Cushion_Layer_01', 'Material_inner_Cushion_Foam');
});

eventHTMLElem('click', 'instructions', true, function(event) {
  if (featureAvailable('MOBILE')) {
    setHTMLElemStyle('display', 'block', 'modal_mobile', true);
  } else {
    setHTMLElemStyle('display', 'block', 'modal', true);
  }
});

eventHTMLElem('click', 'electrode_circuit_one_sided_printed_trace', true, function(event) {
  hide_objects();
  selected_electrode_circuit = 'Printed Flex (1-Sided)_01';
  assignMat('PCB_Backside', 'PCB_Chip');
  snap_connector_enabled = false;
  if (is_initial_state == true) {
    show_main_layers();
  } else {
    changeVis(selected_electrode_circuit, true);
  }
});
eventHTMLElem('click', 'electrode_circuit_two_sided_printed_trace', true, function(event) {
  hide__electrode_circuits();
  selected_electrode_circuit = 'Printed Flex (2-Sided)';
  assignMat('PCB_Backside', 'PCB_Chip');
  snap_connector_enabled = false;
  if (is_initial_state == true) {
    show_main_layers();
  } else {
    changeVis(selected_electrode_circuit, true);
  }
});
eventHTMLElem('click', 'electrode_circuit_one_sided_snap_connectors', true, function(event) {
  selected_electrode_circuit = snap_connectors_and_printed_trace;
  snap_connector_enabled = true;
  if (is_initial_state == true) {
    go_back_to_initial_state();
  } else {
    hide__electrode_circuits();
    changeVis(selected_electrode_circuit, true);
    if (is_exp_view == true) {
      registerSetTimeout(0.5, function() {

        operateAnimation('PLAY', getAnimations(['GROUP', 'Printed Trace (1-sided) using Snap Connectors']), 101, 150, 'AUTO', 0.5,
                function() {}, false);

            });
    } else {
    }
  }
});
eventHTMLElem('click', 'electrode_circuit_conductive_trace_circuit', true, function(event) {
  hide__electrode_circuits();
  selected_electrode_circuit = 'Conductive Trace Circuit';
  assignMat('PCB_Backside', 'PCB_Box');
  snap_connector_enabled = false;
  if (is_initial_state == true) {
    show_main_layers();
  } else {
    changeVis(selected_electrode_circuit, true);
  }
});

eventHTMLElem('click', 'delivery_liner_layer', true, function(event) {
  if (is_camera_tweening == false) {
    show_main_layers();
    hide_value_statements();
    hide_additional_info();
    hide_mobile_content();
    hide_info_buttons();
    hide_peeling_display_images();
    is_camera_tweening = true;
    tweenCamera(dictGet(empty_camera_selection, 'delivery_liner_layer'), 'cam_center_point', 2, function() {}, 1);

    operateAnimation('PLAY', getAnimations(['GROUP', 'Exploded_View']), 1, 49, 'LoopOnce', 0.6,
            function() {
      autoRotateCamera(false, 0.3);
      if (selected_delivery_liner == 'Delivery_Liner_Oversized_Liner_High_Poly') {

        operateAnimation('PLAY', getAnimations(['GROUP', 'Exploded_View']), 51, 99, 'LoopOnce', 0.7,
                function() {

          operateAnimation('PLAY', getAnimations('Delivery_Liner_Oversized_Liner_High_Poly'), 51, 99, 'AUTO', 1.25,
                  function() {
            zoomCamera(selected_delivery_liner, 2, function() {
              is_camera_tweening = false;
              is_exp_view = false;
              is_initial_state = false;
            });
            hide_objects();
            changeVis(selected_delivery_liner, true);
            autoRotateCamera(true, 1);
            setHTMLElemStyle('display', 'block', 'go_back', true);
            setHTMLElemStyle('display', 'block', 'toggle_off', true);
            setHTMLElemStyle('display', 'none', 'toggle_on', true);
          }, true);

              }, false);

            } else {
        zoomCamera(selected_delivery_liner, 2, function() {
          is_camera_tweening = false;
          is_exp_view = false;
          is_initial_state = false;
        });
        hide_objects();
        registerSetTimeout(0.5, function() {
          setHTMLElemStyle('display', 'block', dictGet(selected_peeling_image, selected_delivery_liner), true);
        });
        changeVis(selected_delivery_liner, true);
        autoRotateCamera(true, 1);
        setHTMLElemStyle('display', 'block', 'go_back', true);
        setHTMLElemStyle('display', 'block', 'toggle_off', true);
        setHTMLElemStyle('display', 'none', 'toggle_on', true);
      }
      if (featureAvailable('MOBILE')) {
        setHTMLElemStyle('display', 'block', 'additional_info_button_mobile', true);
        setHTMLElemStyle('display', 'block', dictGet(mobile_content_selection, 'delivery_liner_layer'), true);
      } else {
        setHTMLElemStyle('display', 'flex', 'value_statements_block', true);
        setHTMLElemStyle('display', 'flex', dictGet(value_statement_selection, 'delivery_liner_layer'), true);
        if (dictGet(additional_info_selection, 'delivery_liner_layer') != 'disabled') {
          setHTMLElemStyle('display', 'block', 'additional_info_button', true);
          setHTMLElemStyle('display', 'block', dictGet(additional_info_selection, 'delivery_liner_layer'), true);
        }
      }
      selected_layer = 'delivery_liner_layer';
    }, true);

        }
});

eventHTMLElem('click', 'delivery_liner_layer_oversized_liner', true, function(event) {
  hide_peeling_display_images();
  if (is_camera_tweening == false) {
    toggle_oversized_layers(true);
  }
});
eventHTMLElem('click', 'delivery_liner_layer_split_liners', true, function(event) {
  hide_peeling_display_images();
  if (is_camera_tweening == false) {
    selected_delivery_liner = 'Delivery_Liner_Split_Liner';
    toggle_oversized_layers(false);
  }
});
eventHTMLElem('click', 'delivery_liner_layer_folded_liners', true, function(event) {
  hide_peeling_display_images();
  if (is_camera_tweening == false) {
    selected_delivery_liner = 'Delivery_Liner_Split__Folded_Liner';
    toggle_oversized_layers(false);
  }
});
eventHTMLElem('click', 'delivery_liner_layer_serpentine_liner', true, function(event) {
  hide_peeling_display_images();
  if (is_camera_tweening == false) {
    selected_delivery_liner = 'Delivery_Liner_Serpentine_Layer';
    toggle_oversized_layers(false);
  }
});

eventHTMLElem('click', 'skin_contact_layer_flush_cut', true, function(event) {
  toggle_oversized_layers(false);
  if (selected_layer == 'skin_contact_layer') {
    show_variation_statements('variations_skin_contact_layer');
  }
});
eventHTMLElem('click', 'skin_contact_layer_oversized_skirted_design', true, function(event) {
  toggle_oversized_layers(true);
  if (selected_layer == 'skin_contact_layer') {
    show_variation_statements('variations_skin_contact_layer');
  }
});



} // end of PL.init function

PL.disposeListeners = function() {
    if (_pGlob) {
        _pGlob.eventListeners.forEach(({ target, type, listener, optionsOrUseCapture }) => {
            target.removeEventListener(type, listener, optionsOrUseCapture);
        });
        _pGlob.eventListeners.length = 0;
    }
}

PL.dispose = function() {
    PL.disposeListeners();
    _pGlob = null;
    // backward compatibility
    if (v3d[Symbol.toStringTag] !== 'Module') {
        delete v3d.PL;
        delete v3d.puzzles;
    }
}



return PL;

}

export { createPL };
